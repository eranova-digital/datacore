
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `BusinessRecord` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model BusinessRecord
 * 
 */
export type BusinessRecordModel = runtime.Types.Result.DefaultSelection<Prisma.$BusinessRecordPayload>

export type AggregateBusinessRecord = {
  _count: BusinessRecordCountAggregateOutputType | null
  _min: BusinessRecordMinAggregateOutputType | null
  _max: BusinessRecordMaxAggregateOutputType | null
}

export type BusinessRecordMinAggregateOutputType = {
  id: string | null
  cui: string | null
  denumire: string | null
  nrRegCom: string | null
  telefon: string | null
  stareInregistrare: string | null
  dataInregistrare: string | null
  codCaen: string | null
  denumireCaen: string | null
  statusRoEFactura: boolean | null
  organFiscalCompetent: string | null
  formaProprietate: string | null
  formaOrganizare: string | null
  formaJuridica: string | null
  tva: string | null
  adresaSediuSocial: string | null
  adresaDomiciliuFiscal: string | null
  lastUpdated: Date | null
  createdAt: Date | null
}

export type BusinessRecordMaxAggregateOutputType = {
  id: string | null
  cui: string | null
  denumire: string | null
  nrRegCom: string | null
  telefon: string | null
  stareInregistrare: string | null
  dataInregistrare: string | null
  codCaen: string | null
  denumireCaen: string | null
  statusRoEFactura: boolean | null
  organFiscalCompetent: string | null
  formaProprietate: string | null
  formaOrganizare: string | null
  formaJuridica: string | null
  tva: string | null
  adresaSediuSocial: string | null
  adresaDomiciliuFiscal: string | null
  lastUpdated: Date | null
  createdAt: Date | null
}

export type BusinessRecordCountAggregateOutputType = {
  id: number
  cui: number
  denumire: number
  nrRegCom: number
  telefon: number
  stareInregistrare: number
  dataInregistrare: number
  codCaen: number
  denumireCaen: number
  statusRoEFactura: number
  organFiscalCompetent: number
  formaProprietate: number
  formaOrganizare: number
  formaJuridica: number
  tva: number
  adresaSediuSocial: number
  adresaDomiciliuFiscal: number
  lastUpdated: number
  createdAt: number
  _all: number
}


export type BusinessRecordMinAggregateInputType = {
  id?: true
  cui?: true
  denumire?: true
  nrRegCom?: true
  telefon?: true
  stareInregistrare?: true
  dataInregistrare?: true
  codCaen?: true
  denumireCaen?: true
  statusRoEFactura?: true
  organFiscalCompetent?: true
  formaProprietate?: true
  formaOrganizare?: true
  formaJuridica?: true
  tva?: true
  adresaSediuSocial?: true
  adresaDomiciliuFiscal?: true
  lastUpdated?: true
  createdAt?: true
}

export type BusinessRecordMaxAggregateInputType = {
  id?: true
  cui?: true
  denumire?: true
  nrRegCom?: true
  telefon?: true
  stareInregistrare?: true
  dataInregistrare?: true
  codCaen?: true
  denumireCaen?: true
  statusRoEFactura?: true
  organFiscalCompetent?: true
  formaProprietate?: true
  formaOrganizare?: true
  formaJuridica?: true
  tva?: true
  adresaSediuSocial?: true
  adresaDomiciliuFiscal?: true
  lastUpdated?: true
  createdAt?: true
}

export type BusinessRecordCountAggregateInputType = {
  id?: true
  cui?: true
  denumire?: true
  nrRegCom?: true
  telefon?: true
  stareInregistrare?: true
  dataInregistrare?: true
  codCaen?: true
  denumireCaen?: true
  statusRoEFactura?: true
  organFiscalCompetent?: true
  formaProprietate?: true
  formaOrganizare?: true
  formaJuridica?: true
  tva?: true
  adresaSediuSocial?: true
  adresaDomiciliuFiscal?: true
  lastUpdated?: true
  createdAt?: true
  _all?: true
}

export type BusinessRecordAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BusinessRecord to aggregate.
   */
  where?: Prisma.BusinessRecordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BusinessRecords to fetch.
   */
  orderBy?: Prisma.BusinessRecordOrderByWithRelationInput | Prisma.BusinessRecordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BusinessRecordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BusinessRecords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BusinessRecords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BusinessRecords
  **/
  _count?: true | BusinessRecordCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BusinessRecordMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BusinessRecordMaxAggregateInputType
}

export type GetBusinessRecordAggregateType<T extends BusinessRecordAggregateArgs> = {
      [P in keyof T & keyof AggregateBusinessRecord]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBusinessRecord[P]>
    : Prisma.GetScalarType<T[P], AggregateBusinessRecord[P]>
}




export type BusinessRecordGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BusinessRecordWhereInput
  orderBy?: Prisma.BusinessRecordOrderByWithAggregationInput | Prisma.BusinessRecordOrderByWithAggregationInput[]
  by: Prisma.BusinessRecordScalarFieldEnum[] | Prisma.BusinessRecordScalarFieldEnum
  having?: Prisma.BusinessRecordScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BusinessRecordCountAggregateInputType | true
  _min?: BusinessRecordMinAggregateInputType
  _max?: BusinessRecordMaxAggregateInputType
}

export type BusinessRecordGroupByOutputType = {
  id: string
  cui: string
  denumire: string
  nrRegCom: string | null
  telefon: string | null
  stareInregistrare: string | null
  dataInregistrare: string | null
  codCaen: string | null
  denumireCaen: string | null
  statusRoEFactura: boolean
  organFiscalCompetent: string | null
  formaProprietate: string | null
  formaOrganizare: string | null
  formaJuridica: string | null
  tva: string
  adresaSediuSocial: string
  adresaDomiciliuFiscal: string
  lastUpdated: Date
  createdAt: Date
  _count: BusinessRecordCountAggregateOutputType | null
  _min: BusinessRecordMinAggregateOutputType | null
  _max: BusinessRecordMaxAggregateOutputType | null
}

type GetBusinessRecordGroupByPayload<T extends BusinessRecordGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BusinessRecordGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BusinessRecordGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BusinessRecordGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BusinessRecordGroupByOutputType[P]>
      }
    >
  >



export type BusinessRecordWhereInput = {
  AND?: Prisma.BusinessRecordWhereInput | Prisma.BusinessRecordWhereInput[]
  OR?: Prisma.BusinessRecordWhereInput[]
  NOT?: Prisma.BusinessRecordWhereInput | Prisma.BusinessRecordWhereInput[]
  id?: Prisma.StringFilter<"BusinessRecord"> | string
  cui?: Prisma.StringFilter<"BusinessRecord"> | string
  denumire?: Prisma.StringFilter<"BusinessRecord"> | string
  nrRegCom?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  telefon?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  stareInregistrare?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  dataInregistrare?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  codCaen?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  denumireCaen?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  statusRoEFactura?: Prisma.BoolFilter<"BusinessRecord"> | boolean
  organFiscalCompetent?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  formaProprietate?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  formaOrganizare?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  formaJuridica?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  tva?: Prisma.StringFilter<"BusinessRecord"> | string
  adresaSediuSocial?: Prisma.StringFilter<"BusinessRecord"> | string
  adresaDomiciliuFiscal?: Prisma.StringFilter<"BusinessRecord"> | string
  lastUpdated?: Prisma.DateTimeFilter<"BusinessRecord"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"BusinessRecord"> | Date | string
}

export type BusinessRecordOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  cui?: Prisma.SortOrder
  denumire?: Prisma.SortOrder
  nrRegCom?: Prisma.SortOrderInput | Prisma.SortOrder
  telefon?: Prisma.SortOrderInput | Prisma.SortOrder
  stareInregistrare?: Prisma.SortOrderInput | Prisma.SortOrder
  dataInregistrare?: Prisma.SortOrderInput | Prisma.SortOrder
  codCaen?: Prisma.SortOrderInput | Prisma.SortOrder
  denumireCaen?: Prisma.SortOrderInput | Prisma.SortOrder
  statusRoEFactura?: Prisma.SortOrder
  organFiscalCompetent?: Prisma.SortOrderInput | Prisma.SortOrder
  formaProprietate?: Prisma.SortOrderInput | Prisma.SortOrder
  formaOrganizare?: Prisma.SortOrderInput | Prisma.SortOrder
  formaJuridica?: Prisma.SortOrderInput | Prisma.SortOrder
  tva?: Prisma.SortOrder
  adresaSediuSocial?: Prisma.SortOrder
  adresaDomiciliuFiscal?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BusinessRecordWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  cui?: string
  AND?: Prisma.BusinessRecordWhereInput | Prisma.BusinessRecordWhereInput[]
  OR?: Prisma.BusinessRecordWhereInput[]
  NOT?: Prisma.BusinessRecordWhereInput | Prisma.BusinessRecordWhereInput[]
  denumire?: Prisma.StringFilter<"BusinessRecord"> | string
  nrRegCom?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  telefon?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  stareInregistrare?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  dataInregistrare?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  codCaen?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  denumireCaen?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  statusRoEFactura?: Prisma.BoolFilter<"BusinessRecord"> | boolean
  organFiscalCompetent?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  formaProprietate?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  formaOrganizare?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  formaJuridica?: Prisma.StringNullableFilter<"BusinessRecord"> | string | null
  tva?: Prisma.StringFilter<"BusinessRecord"> | string
  adresaSediuSocial?: Prisma.StringFilter<"BusinessRecord"> | string
  adresaDomiciliuFiscal?: Prisma.StringFilter<"BusinessRecord"> | string
  lastUpdated?: Prisma.DateTimeFilter<"BusinessRecord"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"BusinessRecord"> | Date | string
}, "id" | "cui">

export type BusinessRecordOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  cui?: Prisma.SortOrder
  denumire?: Prisma.SortOrder
  nrRegCom?: Prisma.SortOrderInput | Prisma.SortOrder
  telefon?: Prisma.SortOrderInput | Prisma.SortOrder
  stareInregistrare?: Prisma.SortOrderInput | Prisma.SortOrder
  dataInregistrare?: Prisma.SortOrderInput | Prisma.SortOrder
  codCaen?: Prisma.SortOrderInput | Prisma.SortOrder
  denumireCaen?: Prisma.SortOrderInput | Prisma.SortOrder
  statusRoEFactura?: Prisma.SortOrder
  organFiscalCompetent?: Prisma.SortOrderInput | Prisma.SortOrder
  formaProprietate?: Prisma.SortOrderInput | Prisma.SortOrder
  formaOrganizare?: Prisma.SortOrderInput | Prisma.SortOrder
  formaJuridica?: Prisma.SortOrderInput | Prisma.SortOrder
  tva?: Prisma.SortOrder
  adresaSediuSocial?: Prisma.SortOrder
  adresaDomiciliuFiscal?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.BusinessRecordCountOrderByAggregateInput
  _max?: Prisma.BusinessRecordMaxOrderByAggregateInput
  _min?: Prisma.BusinessRecordMinOrderByAggregateInput
}

export type BusinessRecordScalarWhereWithAggregatesInput = {
  AND?: Prisma.BusinessRecordScalarWhereWithAggregatesInput | Prisma.BusinessRecordScalarWhereWithAggregatesInput[]
  OR?: Prisma.BusinessRecordScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BusinessRecordScalarWhereWithAggregatesInput | Prisma.BusinessRecordScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"BusinessRecord"> | string
  cui?: Prisma.StringWithAggregatesFilter<"BusinessRecord"> | string
  denumire?: Prisma.StringWithAggregatesFilter<"BusinessRecord"> | string
  nrRegCom?: Prisma.StringNullableWithAggregatesFilter<"BusinessRecord"> | string | null
  telefon?: Prisma.StringNullableWithAggregatesFilter<"BusinessRecord"> | string | null
  stareInregistrare?: Prisma.StringNullableWithAggregatesFilter<"BusinessRecord"> | string | null
  dataInregistrare?: Prisma.StringNullableWithAggregatesFilter<"BusinessRecord"> | string | null
  codCaen?: Prisma.StringNullableWithAggregatesFilter<"BusinessRecord"> | string | null
  denumireCaen?: Prisma.StringNullableWithAggregatesFilter<"BusinessRecord"> | string | null
  statusRoEFactura?: Prisma.BoolWithAggregatesFilter<"BusinessRecord"> | boolean
  organFiscalCompetent?: Prisma.StringNullableWithAggregatesFilter<"BusinessRecord"> | string | null
  formaProprietate?: Prisma.StringNullableWithAggregatesFilter<"BusinessRecord"> | string | null
  formaOrganizare?: Prisma.StringNullableWithAggregatesFilter<"BusinessRecord"> | string | null
  formaJuridica?: Prisma.StringNullableWithAggregatesFilter<"BusinessRecord"> | string | null
  tva?: Prisma.StringWithAggregatesFilter<"BusinessRecord"> | string
  adresaSediuSocial?: Prisma.StringWithAggregatesFilter<"BusinessRecord"> | string
  adresaDomiciliuFiscal?: Prisma.StringWithAggregatesFilter<"BusinessRecord"> | string
  lastUpdated?: Prisma.DateTimeWithAggregatesFilter<"BusinessRecord"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"BusinessRecord"> | Date | string
}

export type BusinessRecordCreateInput = {
  id?: string
  cui: string
  denumire: string
  nrRegCom?: string | null
  telefon?: string | null
  stareInregistrare?: string | null
  dataInregistrare?: string | null
  codCaen?: string | null
  denumireCaen?: string | null
  statusRoEFactura?: boolean
  organFiscalCompetent?: string | null
  formaProprietate?: string | null
  formaOrganizare?: string | null
  formaJuridica?: string | null
  tva: string
  adresaSediuSocial: string
  adresaDomiciliuFiscal: string
  lastUpdated?: Date | string
  createdAt?: Date | string
}

export type BusinessRecordUncheckedCreateInput = {
  id?: string
  cui: string
  denumire: string
  nrRegCom?: string | null
  telefon?: string | null
  stareInregistrare?: string | null
  dataInregistrare?: string | null
  codCaen?: string | null
  denumireCaen?: string | null
  statusRoEFactura?: boolean
  organFiscalCompetent?: string | null
  formaProprietate?: string | null
  formaOrganizare?: string | null
  formaJuridica?: string | null
  tva: string
  adresaSediuSocial: string
  adresaDomiciliuFiscal: string
  lastUpdated?: Date | string
  createdAt?: Date | string
}

export type BusinessRecordUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cui?: Prisma.StringFieldUpdateOperationsInput | string
  denumire?: Prisma.StringFieldUpdateOperationsInput | string
  nrRegCom?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  telefon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stareInregistrare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dataInregistrare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  codCaen?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  denumireCaen?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  statusRoEFactura?: Prisma.BoolFieldUpdateOperationsInput | boolean
  organFiscalCompetent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaProprietate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaOrganizare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaJuridica?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tva?: Prisma.StringFieldUpdateOperationsInput | string
  adresaSediuSocial?: Prisma.StringFieldUpdateOperationsInput | string
  adresaDomiciliuFiscal?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BusinessRecordUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cui?: Prisma.StringFieldUpdateOperationsInput | string
  denumire?: Prisma.StringFieldUpdateOperationsInput | string
  nrRegCom?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  telefon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stareInregistrare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dataInregistrare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  codCaen?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  denumireCaen?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  statusRoEFactura?: Prisma.BoolFieldUpdateOperationsInput | boolean
  organFiscalCompetent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaProprietate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaOrganizare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaJuridica?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tva?: Prisma.StringFieldUpdateOperationsInput | string
  adresaSediuSocial?: Prisma.StringFieldUpdateOperationsInput | string
  adresaDomiciliuFiscal?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BusinessRecordCreateManyInput = {
  id?: string
  cui: string
  denumire: string
  nrRegCom?: string | null
  telefon?: string | null
  stareInregistrare?: string | null
  dataInregistrare?: string | null
  codCaen?: string | null
  denumireCaen?: string | null
  statusRoEFactura?: boolean
  organFiscalCompetent?: string | null
  formaProprietate?: string | null
  formaOrganizare?: string | null
  formaJuridica?: string | null
  tva: string
  adresaSediuSocial: string
  adresaDomiciliuFiscal: string
  lastUpdated?: Date | string
  createdAt?: Date | string
}

export type BusinessRecordUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cui?: Prisma.StringFieldUpdateOperationsInput | string
  denumire?: Prisma.StringFieldUpdateOperationsInput | string
  nrRegCom?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  telefon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stareInregistrare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dataInregistrare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  codCaen?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  denumireCaen?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  statusRoEFactura?: Prisma.BoolFieldUpdateOperationsInput | boolean
  organFiscalCompetent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaProprietate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaOrganizare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaJuridica?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tva?: Prisma.StringFieldUpdateOperationsInput | string
  adresaSediuSocial?: Prisma.StringFieldUpdateOperationsInput | string
  adresaDomiciliuFiscal?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BusinessRecordUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cui?: Prisma.StringFieldUpdateOperationsInput | string
  denumire?: Prisma.StringFieldUpdateOperationsInput | string
  nrRegCom?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  telefon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  stareInregistrare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dataInregistrare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  codCaen?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  denumireCaen?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  statusRoEFactura?: Prisma.BoolFieldUpdateOperationsInput | boolean
  organFiscalCompetent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaProprietate?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaOrganizare?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  formaJuridica?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tva?: Prisma.StringFieldUpdateOperationsInput | string
  adresaSediuSocial?: Prisma.StringFieldUpdateOperationsInput | string
  adresaDomiciliuFiscal?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BusinessRecordCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cui?: Prisma.SortOrder
  denumire?: Prisma.SortOrder
  nrRegCom?: Prisma.SortOrder
  telefon?: Prisma.SortOrder
  stareInregistrare?: Prisma.SortOrder
  dataInregistrare?: Prisma.SortOrder
  codCaen?: Prisma.SortOrder
  denumireCaen?: Prisma.SortOrder
  statusRoEFactura?: Prisma.SortOrder
  organFiscalCompetent?: Prisma.SortOrder
  formaProprietate?: Prisma.SortOrder
  formaOrganizare?: Prisma.SortOrder
  formaJuridica?: Prisma.SortOrder
  tva?: Prisma.SortOrder
  adresaSediuSocial?: Prisma.SortOrder
  adresaDomiciliuFiscal?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BusinessRecordMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cui?: Prisma.SortOrder
  denumire?: Prisma.SortOrder
  nrRegCom?: Prisma.SortOrder
  telefon?: Prisma.SortOrder
  stareInregistrare?: Prisma.SortOrder
  dataInregistrare?: Prisma.SortOrder
  codCaen?: Prisma.SortOrder
  denumireCaen?: Prisma.SortOrder
  statusRoEFactura?: Prisma.SortOrder
  organFiscalCompetent?: Prisma.SortOrder
  formaProprietate?: Prisma.SortOrder
  formaOrganizare?: Prisma.SortOrder
  formaJuridica?: Prisma.SortOrder
  tva?: Prisma.SortOrder
  adresaSediuSocial?: Prisma.SortOrder
  adresaDomiciliuFiscal?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BusinessRecordMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cui?: Prisma.SortOrder
  denumire?: Prisma.SortOrder
  nrRegCom?: Prisma.SortOrder
  telefon?: Prisma.SortOrder
  stareInregistrare?: Prisma.SortOrder
  dataInregistrare?: Prisma.SortOrder
  codCaen?: Prisma.SortOrder
  denumireCaen?: Prisma.SortOrder
  statusRoEFactura?: Prisma.SortOrder
  organFiscalCompetent?: Prisma.SortOrder
  formaProprietate?: Prisma.SortOrder
  formaOrganizare?: Prisma.SortOrder
  formaJuridica?: Prisma.SortOrder
  tva?: Prisma.SortOrder
  adresaSediuSocial?: Prisma.SortOrder
  adresaDomiciliuFiscal?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}



export type BusinessRecordSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cui?: boolean
  denumire?: boolean
  nrRegCom?: boolean
  telefon?: boolean
  stareInregistrare?: boolean
  dataInregistrare?: boolean
  codCaen?: boolean
  denumireCaen?: boolean
  statusRoEFactura?: boolean
  organFiscalCompetent?: boolean
  formaProprietate?: boolean
  formaOrganizare?: boolean
  formaJuridica?: boolean
  tva?: boolean
  adresaSediuSocial?: boolean
  adresaDomiciliuFiscal?: boolean
  lastUpdated?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["businessRecord"]>

export type BusinessRecordSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cui?: boolean
  denumire?: boolean
  nrRegCom?: boolean
  telefon?: boolean
  stareInregistrare?: boolean
  dataInregistrare?: boolean
  codCaen?: boolean
  denumireCaen?: boolean
  statusRoEFactura?: boolean
  organFiscalCompetent?: boolean
  formaProprietate?: boolean
  formaOrganizare?: boolean
  formaJuridica?: boolean
  tva?: boolean
  adresaSediuSocial?: boolean
  adresaDomiciliuFiscal?: boolean
  lastUpdated?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["businessRecord"]>

export type BusinessRecordSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cui?: boolean
  denumire?: boolean
  nrRegCom?: boolean
  telefon?: boolean
  stareInregistrare?: boolean
  dataInregistrare?: boolean
  codCaen?: boolean
  denumireCaen?: boolean
  statusRoEFactura?: boolean
  organFiscalCompetent?: boolean
  formaProprietate?: boolean
  formaOrganizare?: boolean
  formaJuridica?: boolean
  tva?: boolean
  adresaSediuSocial?: boolean
  adresaDomiciliuFiscal?: boolean
  lastUpdated?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["businessRecord"]>

export type BusinessRecordSelectScalar = {
  id?: boolean
  cui?: boolean
  denumire?: boolean
  nrRegCom?: boolean
  telefon?: boolean
  stareInregistrare?: boolean
  dataInregistrare?: boolean
  codCaen?: boolean
  denumireCaen?: boolean
  statusRoEFactura?: boolean
  organFiscalCompetent?: boolean
  formaProprietate?: boolean
  formaOrganizare?: boolean
  formaJuridica?: boolean
  tva?: boolean
  adresaSediuSocial?: boolean
  adresaDomiciliuFiscal?: boolean
  lastUpdated?: boolean
  createdAt?: boolean
}

export type BusinessRecordOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "cui" | "denumire" | "nrRegCom" | "telefon" | "stareInregistrare" | "dataInregistrare" | "codCaen" | "denumireCaen" | "statusRoEFactura" | "organFiscalCompetent" | "formaProprietate" | "formaOrganizare" | "formaJuridica" | "tva" | "adresaSediuSocial" | "adresaDomiciliuFiscal" | "lastUpdated" | "createdAt", ExtArgs["result"]["businessRecord"]>

export type $BusinessRecordPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BusinessRecord"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    cui: string
    denumire: string
    nrRegCom: string | null
    telefon: string | null
    stareInregistrare: string | null
    dataInregistrare: string | null
    codCaen: string | null
    denumireCaen: string | null
    statusRoEFactura: boolean
    organFiscalCompetent: string | null
    formaProprietate: string | null
    formaOrganizare: string | null
    formaJuridica: string | null
    tva: string
    adresaSediuSocial: string
    adresaDomiciliuFiscal: string
    lastUpdated: Date
    createdAt: Date
  }, ExtArgs["result"]["businessRecord"]>
  composites: {}
}

export type BusinessRecordGetPayload<S extends boolean | null | undefined | BusinessRecordDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload, S>

export type BusinessRecordCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BusinessRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BusinessRecordCountAggregateInputType | true
  }

export interface BusinessRecordDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BusinessRecord'], meta: { name: 'BusinessRecord' } }
  /**
   * Find zero or one BusinessRecord that matches the filter.
   * @param {BusinessRecordFindUniqueArgs} args - Arguments to find a BusinessRecord
   * @example
   * // Get one BusinessRecord
   * const businessRecord = await prisma.businessRecord.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BusinessRecordFindUniqueArgs>(args: Prisma.SelectSubset<T, BusinessRecordFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BusinessRecordClient<runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BusinessRecord that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BusinessRecordFindUniqueOrThrowArgs} args - Arguments to find a BusinessRecord
   * @example
   * // Get one BusinessRecord
   * const businessRecord = await prisma.businessRecord.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BusinessRecordFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BusinessRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BusinessRecordClient<runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BusinessRecord that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessRecordFindFirstArgs} args - Arguments to find a BusinessRecord
   * @example
   * // Get one BusinessRecord
   * const businessRecord = await prisma.businessRecord.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BusinessRecordFindFirstArgs>(args?: Prisma.SelectSubset<T, BusinessRecordFindFirstArgs<ExtArgs>>): Prisma.Prisma__BusinessRecordClient<runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BusinessRecord that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessRecordFindFirstOrThrowArgs} args - Arguments to find a BusinessRecord
   * @example
   * // Get one BusinessRecord
   * const businessRecord = await prisma.businessRecord.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BusinessRecordFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BusinessRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BusinessRecordClient<runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BusinessRecords that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessRecordFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BusinessRecords
   * const businessRecords = await prisma.businessRecord.findMany()
   * 
   * // Get first 10 BusinessRecords
   * const businessRecords = await prisma.businessRecord.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const businessRecordWithIdOnly = await prisma.businessRecord.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BusinessRecordFindManyArgs>(args?: Prisma.SelectSubset<T, BusinessRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BusinessRecord.
   * @param {BusinessRecordCreateArgs} args - Arguments to create a BusinessRecord.
   * @example
   * // Create one BusinessRecord
   * const BusinessRecord = await prisma.businessRecord.create({
   *   data: {
   *     // ... data to create a BusinessRecord
   *   }
   * })
   * 
   */
  create<T extends BusinessRecordCreateArgs>(args: Prisma.SelectSubset<T, BusinessRecordCreateArgs<ExtArgs>>): Prisma.Prisma__BusinessRecordClient<runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BusinessRecords.
   * @param {BusinessRecordCreateManyArgs} args - Arguments to create many BusinessRecords.
   * @example
   * // Create many BusinessRecords
   * const businessRecord = await prisma.businessRecord.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BusinessRecordCreateManyArgs>(args?: Prisma.SelectSubset<T, BusinessRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BusinessRecords and returns the data saved in the database.
   * @param {BusinessRecordCreateManyAndReturnArgs} args - Arguments to create many BusinessRecords.
   * @example
   * // Create many BusinessRecords
   * const businessRecord = await prisma.businessRecord.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BusinessRecords and only return the `id`
   * const businessRecordWithIdOnly = await prisma.businessRecord.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BusinessRecordCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BusinessRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BusinessRecord.
   * @param {BusinessRecordDeleteArgs} args - Arguments to delete one BusinessRecord.
   * @example
   * // Delete one BusinessRecord
   * const BusinessRecord = await prisma.businessRecord.delete({
   *   where: {
   *     // ... filter to delete one BusinessRecord
   *   }
   * })
   * 
   */
  delete<T extends BusinessRecordDeleteArgs>(args: Prisma.SelectSubset<T, BusinessRecordDeleteArgs<ExtArgs>>): Prisma.Prisma__BusinessRecordClient<runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BusinessRecord.
   * @param {BusinessRecordUpdateArgs} args - Arguments to update one BusinessRecord.
   * @example
   * // Update one BusinessRecord
   * const businessRecord = await prisma.businessRecord.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BusinessRecordUpdateArgs>(args: Prisma.SelectSubset<T, BusinessRecordUpdateArgs<ExtArgs>>): Prisma.Prisma__BusinessRecordClient<runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BusinessRecords.
   * @param {BusinessRecordDeleteManyArgs} args - Arguments to filter BusinessRecords to delete.
   * @example
   * // Delete a few BusinessRecords
   * const { count } = await prisma.businessRecord.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BusinessRecordDeleteManyArgs>(args?: Prisma.SelectSubset<T, BusinessRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BusinessRecords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessRecordUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BusinessRecords
   * const businessRecord = await prisma.businessRecord.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BusinessRecordUpdateManyArgs>(args: Prisma.SelectSubset<T, BusinessRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BusinessRecords and returns the data updated in the database.
   * @param {BusinessRecordUpdateManyAndReturnArgs} args - Arguments to update many BusinessRecords.
   * @example
   * // Update many BusinessRecords
   * const businessRecord = await prisma.businessRecord.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BusinessRecords and only return the `id`
   * const businessRecordWithIdOnly = await prisma.businessRecord.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BusinessRecordUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BusinessRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BusinessRecord.
   * @param {BusinessRecordUpsertArgs} args - Arguments to update or create a BusinessRecord.
   * @example
   * // Update or create a BusinessRecord
   * const businessRecord = await prisma.businessRecord.upsert({
   *   create: {
   *     // ... data to create a BusinessRecord
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BusinessRecord we want to update
   *   }
   * })
   */
  upsert<T extends BusinessRecordUpsertArgs>(args: Prisma.SelectSubset<T, BusinessRecordUpsertArgs<ExtArgs>>): Prisma.Prisma__BusinessRecordClient<runtime.Types.Result.GetResult<Prisma.$BusinessRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BusinessRecords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessRecordCountArgs} args - Arguments to filter BusinessRecords to count.
   * @example
   * // Count the number of BusinessRecords
   * const count = await prisma.businessRecord.count({
   *   where: {
   *     // ... the filter for the BusinessRecords we want to count
   *   }
   * })
  **/
  count<T extends BusinessRecordCountArgs>(
    args?: Prisma.Subset<T, BusinessRecordCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BusinessRecordCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BusinessRecord.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BusinessRecordAggregateArgs>(args: Prisma.Subset<T, BusinessRecordAggregateArgs>): Prisma.PrismaPromise<GetBusinessRecordAggregateType<T>>

  /**
   * Group by BusinessRecord.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessRecordGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BusinessRecordGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BusinessRecordGroupByArgs['orderBy'] }
      : { orderBy?: BusinessRecordGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BusinessRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BusinessRecord model
 */
readonly fields: BusinessRecordFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BusinessRecord.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BusinessRecordClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BusinessRecord model
 */
export interface BusinessRecordFieldRefs {
  readonly id: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly cui: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly denumire: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly nrRegCom: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly telefon: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly stareInregistrare: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly dataInregistrare: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly codCaen: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly denumireCaen: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly statusRoEFactura: Prisma.FieldRef<"BusinessRecord", 'Boolean'>
  readonly organFiscalCompetent: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly formaProprietate: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly formaOrganizare: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly formaJuridica: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly tva: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly adresaSediuSocial: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly adresaDomiciliuFiscal: Prisma.FieldRef<"BusinessRecord", 'String'>
  readonly lastUpdated: Prisma.FieldRef<"BusinessRecord", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"BusinessRecord", 'DateTime'>
}
    

// Custom InputTypes
/**
 * BusinessRecord findUnique
 */
export type BusinessRecordFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
  /**
   * Filter, which BusinessRecord to fetch.
   */
  where: Prisma.BusinessRecordWhereUniqueInput
}

/**
 * BusinessRecord findUniqueOrThrow
 */
export type BusinessRecordFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
  /**
   * Filter, which BusinessRecord to fetch.
   */
  where: Prisma.BusinessRecordWhereUniqueInput
}

/**
 * BusinessRecord findFirst
 */
export type BusinessRecordFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
  /**
   * Filter, which BusinessRecord to fetch.
   */
  where?: Prisma.BusinessRecordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BusinessRecords to fetch.
   */
  orderBy?: Prisma.BusinessRecordOrderByWithRelationInput | Prisma.BusinessRecordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BusinessRecords.
   */
  cursor?: Prisma.BusinessRecordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BusinessRecords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BusinessRecords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BusinessRecords.
   */
  distinct?: Prisma.BusinessRecordScalarFieldEnum | Prisma.BusinessRecordScalarFieldEnum[]
}

/**
 * BusinessRecord findFirstOrThrow
 */
export type BusinessRecordFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
  /**
   * Filter, which BusinessRecord to fetch.
   */
  where?: Prisma.BusinessRecordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BusinessRecords to fetch.
   */
  orderBy?: Prisma.BusinessRecordOrderByWithRelationInput | Prisma.BusinessRecordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BusinessRecords.
   */
  cursor?: Prisma.BusinessRecordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BusinessRecords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BusinessRecords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BusinessRecords.
   */
  distinct?: Prisma.BusinessRecordScalarFieldEnum | Prisma.BusinessRecordScalarFieldEnum[]
}

/**
 * BusinessRecord findMany
 */
export type BusinessRecordFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
  /**
   * Filter, which BusinessRecords to fetch.
   */
  where?: Prisma.BusinessRecordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BusinessRecords to fetch.
   */
  orderBy?: Prisma.BusinessRecordOrderByWithRelationInput | Prisma.BusinessRecordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BusinessRecords.
   */
  cursor?: Prisma.BusinessRecordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BusinessRecords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BusinessRecords.
   */
  skip?: number
  distinct?: Prisma.BusinessRecordScalarFieldEnum | Prisma.BusinessRecordScalarFieldEnum[]
}

/**
 * BusinessRecord create
 */
export type BusinessRecordCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
  /**
   * The data needed to create a BusinessRecord.
   */
  data: Prisma.XOR<Prisma.BusinessRecordCreateInput, Prisma.BusinessRecordUncheckedCreateInput>
}

/**
 * BusinessRecord createMany
 */
export type BusinessRecordCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BusinessRecords.
   */
  data: Prisma.BusinessRecordCreateManyInput | Prisma.BusinessRecordCreateManyInput[]
}

/**
 * BusinessRecord createManyAndReturn
 */
export type BusinessRecordCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
  /**
   * The data used to create many BusinessRecords.
   */
  data: Prisma.BusinessRecordCreateManyInput | Prisma.BusinessRecordCreateManyInput[]
}

/**
 * BusinessRecord update
 */
export type BusinessRecordUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
  /**
   * The data needed to update a BusinessRecord.
   */
  data: Prisma.XOR<Prisma.BusinessRecordUpdateInput, Prisma.BusinessRecordUncheckedUpdateInput>
  /**
   * Choose, which BusinessRecord to update.
   */
  where: Prisma.BusinessRecordWhereUniqueInput
}

/**
 * BusinessRecord updateMany
 */
export type BusinessRecordUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BusinessRecords.
   */
  data: Prisma.XOR<Prisma.BusinessRecordUpdateManyMutationInput, Prisma.BusinessRecordUncheckedUpdateManyInput>
  /**
   * Filter which BusinessRecords to update
   */
  where?: Prisma.BusinessRecordWhereInput
  /**
   * Limit how many BusinessRecords to update.
   */
  limit?: number
}

/**
 * BusinessRecord updateManyAndReturn
 */
export type BusinessRecordUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
  /**
   * The data used to update BusinessRecords.
   */
  data: Prisma.XOR<Prisma.BusinessRecordUpdateManyMutationInput, Prisma.BusinessRecordUncheckedUpdateManyInput>
  /**
   * Filter which BusinessRecords to update
   */
  where?: Prisma.BusinessRecordWhereInput
  /**
   * Limit how many BusinessRecords to update.
   */
  limit?: number
}

/**
 * BusinessRecord upsert
 */
export type BusinessRecordUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
  /**
   * The filter to search for the BusinessRecord to update in case it exists.
   */
  where: Prisma.BusinessRecordWhereUniqueInput
  /**
   * In case the BusinessRecord found by the `where` argument doesn't exist, create a new BusinessRecord with this data.
   */
  create: Prisma.XOR<Prisma.BusinessRecordCreateInput, Prisma.BusinessRecordUncheckedCreateInput>
  /**
   * In case the BusinessRecord was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BusinessRecordUpdateInput, Prisma.BusinessRecordUncheckedUpdateInput>
}

/**
 * BusinessRecord delete
 */
export type BusinessRecordDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
  /**
   * Filter which BusinessRecord to delete.
   */
  where: Prisma.BusinessRecordWhereUniqueInput
}

/**
 * BusinessRecord deleteMany
 */
export type BusinessRecordDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BusinessRecords to delete
   */
  where?: Prisma.BusinessRecordWhereInput
  /**
   * Limit how many BusinessRecords to delete.
   */
  limit?: number
}

/**
 * BusinessRecord without action
 */
export type BusinessRecordDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessRecord
   */
  select?: Prisma.BusinessRecordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessRecord
   */
  omit?: Prisma.BusinessRecordOmit<ExtArgs> | null
}
