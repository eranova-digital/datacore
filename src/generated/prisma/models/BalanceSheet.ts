
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `BalanceSheet` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model BalanceSheet
 * 
 */
export type BalanceSheetModel = runtime.Types.Result.DefaultSelection<Prisma.$BalanceSheetPayload>

export type AggregateBalanceSheet = {
  _count: BalanceSheetCountAggregateOutputType | null
  _avg: BalanceSheetAvgAggregateOutputType | null
  _sum: BalanceSheetSumAggregateOutputType | null
  _min: BalanceSheetMinAggregateOutputType | null
  _max: BalanceSheetMaxAggregateOutputType | null
}

export type BalanceSheetAvgAggregateOutputType = {
  an: number | null
}

export type BalanceSheetSumAggregateOutputType = {
  an: number | null
}

export type BalanceSheetMinAggregateOutputType = {
  id: string | null
  cui: string | null
  an: number | null
  indicators: string | null
  lastUpdated: Date | null
  createdAt: Date | null
}

export type BalanceSheetMaxAggregateOutputType = {
  id: string | null
  cui: string | null
  an: number | null
  indicators: string | null
  lastUpdated: Date | null
  createdAt: Date | null
}

export type BalanceSheetCountAggregateOutputType = {
  id: number
  cui: number
  an: number
  indicators: number
  lastUpdated: number
  createdAt: number
  _all: number
}


export type BalanceSheetAvgAggregateInputType = {
  an?: true
}

export type BalanceSheetSumAggregateInputType = {
  an?: true
}

export type BalanceSheetMinAggregateInputType = {
  id?: true
  cui?: true
  an?: true
  indicators?: true
  lastUpdated?: true
  createdAt?: true
}

export type BalanceSheetMaxAggregateInputType = {
  id?: true
  cui?: true
  an?: true
  indicators?: true
  lastUpdated?: true
  createdAt?: true
}

export type BalanceSheetCountAggregateInputType = {
  id?: true
  cui?: true
  an?: true
  indicators?: true
  lastUpdated?: true
  createdAt?: true
  _all?: true
}

export type BalanceSheetAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BalanceSheet to aggregate.
   */
  where?: Prisma.BalanceSheetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BalanceSheets to fetch.
   */
  orderBy?: Prisma.BalanceSheetOrderByWithRelationInput | Prisma.BalanceSheetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BalanceSheetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BalanceSheets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BalanceSheets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BalanceSheets
  **/
  _count?: true | BalanceSheetCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BalanceSheetAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BalanceSheetSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BalanceSheetMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BalanceSheetMaxAggregateInputType
}

export type GetBalanceSheetAggregateType<T extends BalanceSheetAggregateArgs> = {
      [P in keyof T & keyof AggregateBalanceSheet]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBalanceSheet[P]>
    : Prisma.GetScalarType<T[P], AggregateBalanceSheet[P]>
}




export type BalanceSheetGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BalanceSheetWhereInput
  orderBy?: Prisma.BalanceSheetOrderByWithAggregationInput | Prisma.BalanceSheetOrderByWithAggregationInput[]
  by: Prisma.BalanceSheetScalarFieldEnum[] | Prisma.BalanceSheetScalarFieldEnum
  having?: Prisma.BalanceSheetScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BalanceSheetCountAggregateInputType | true
  _avg?: BalanceSheetAvgAggregateInputType
  _sum?: BalanceSheetSumAggregateInputType
  _min?: BalanceSheetMinAggregateInputType
  _max?: BalanceSheetMaxAggregateInputType
}

export type BalanceSheetGroupByOutputType = {
  id: string
  cui: string
  an: number
  indicators: string
  lastUpdated: Date
  createdAt: Date
  _count: BalanceSheetCountAggregateOutputType | null
  _avg: BalanceSheetAvgAggregateOutputType | null
  _sum: BalanceSheetSumAggregateOutputType | null
  _min: BalanceSheetMinAggregateOutputType | null
  _max: BalanceSheetMaxAggregateOutputType | null
}

type GetBalanceSheetGroupByPayload<T extends BalanceSheetGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BalanceSheetGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BalanceSheetGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BalanceSheetGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BalanceSheetGroupByOutputType[P]>
      }
    >
  >



export type BalanceSheetWhereInput = {
  AND?: Prisma.BalanceSheetWhereInput | Prisma.BalanceSheetWhereInput[]
  OR?: Prisma.BalanceSheetWhereInput[]
  NOT?: Prisma.BalanceSheetWhereInput | Prisma.BalanceSheetWhereInput[]
  id?: Prisma.StringFilter<"BalanceSheet"> | string
  cui?: Prisma.StringFilter<"BalanceSheet"> | string
  an?: Prisma.IntFilter<"BalanceSheet"> | number
  indicators?: Prisma.StringFilter<"BalanceSheet"> | string
  lastUpdated?: Prisma.DateTimeFilter<"BalanceSheet"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"BalanceSheet"> | Date | string
}

export type BalanceSheetOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  cui?: Prisma.SortOrder
  an?: Prisma.SortOrder
  indicators?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BalanceSheetWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  cui_an?: Prisma.BalanceSheetCuiAnCompoundUniqueInput
  AND?: Prisma.BalanceSheetWhereInput | Prisma.BalanceSheetWhereInput[]
  OR?: Prisma.BalanceSheetWhereInput[]
  NOT?: Prisma.BalanceSheetWhereInput | Prisma.BalanceSheetWhereInput[]
  cui?: Prisma.StringFilter<"BalanceSheet"> | string
  an?: Prisma.IntFilter<"BalanceSheet"> | number
  indicators?: Prisma.StringFilter<"BalanceSheet"> | string
  lastUpdated?: Prisma.DateTimeFilter<"BalanceSheet"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"BalanceSheet"> | Date | string
}, "id" | "cui_an">

export type BalanceSheetOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  cui?: Prisma.SortOrder
  an?: Prisma.SortOrder
  indicators?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.BalanceSheetCountOrderByAggregateInput
  _avg?: Prisma.BalanceSheetAvgOrderByAggregateInput
  _max?: Prisma.BalanceSheetMaxOrderByAggregateInput
  _min?: Prisma.BalanceSheetMinOrderByAggregateInput
  _sum?: Prisma.BalanceSheetSumOrderByAggregateInput
}

export type BalanceSheetScalarWhereWithAggregatesInput = {
  AND?: Prisma.BalanceSheetScalarWhereWithAggregatesInput | Prisma.BalanceSheetScalarWhereWithAggregatesInput[]
  OR?: Prisma.BalanceSheetScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BalanceSheetScalarWhereWithAggregatesInput | Prisma.BalanceSheetScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"BalanceSheet"> | string
  cui?: Prisma.StringWithAggregatesFilter<"BalanceSheet"> | string
  an?: Prisma.IntWithAggregatesFilter<"BalanceSheet"> | number
  indicators?: Prisma.StringWithAggregatesFilter<"BalanceSheet"> | string
  lastUpdated?: Prisma.DateTimeWithAggregatesFilter<"BalanceSheet"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"BalanceSheet"> | Date | string
}

export type BalanceSheetCreateInput = {
  id?: string
  cui: string
  an: number
  indicators: string
  lastUpdated?: Date | string
  createdAt?: Date | string
}

export type BalanceSheetUncheckedCreateInput = {
  id?: string
  cui: string
  an: number
  indicators: string
  lastUpdated?: Date | string
  createdAt?: Date | string
}

export type BalanceSheetUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cui?: Prisma.StringFieldUpdateOperationsInput | string
  an?: Prisma.IntFieldUpdateOperationsInput | number
  indicators?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BalanceSheetUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cui?: Prisma.StringFieldUpdateOperationsInput | string
  an?: Prisma.IntFieldUpdateOperationsInput | number
  indicators?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BalanceSheetCreateManyInput = {
  id?: string
  cui: string
  an: number
  indicators: string
  lastUpdated?: Date | string
  createdAt?: Date | string
}

export type BalanceSheetUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cui?: Prisma.StringFieldUpdateOperationsInput | string
  an?: Prisma.IntFieldUpdateOperationsInput | number
  indicators?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BalanceSheetUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cui?: Prisma.StringFieldUpdateOperationsInput | string
  an?: Prisma.IntFieldUpdateOperationsInput | number
  indicators?: Prisma.StringFieldUpdateOperationsInput | string
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BalanceSheetCuiAnCompoundUniqueInput = {
  cui: string
  an: number
}

export type BalanceSheetCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cui?: Prisma.SortOrder
  an?: Prisma.SortOrder
  indicators?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BalanceSheetAvgOrderByAggregateInput = {
  an?: Prisma.SortOrder
}

export type BalanceSheetMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cui?: Prisma.SortOrder
  an?: Prisma.SortOrder
  indicators?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BalanceSheetMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cui?: Prisma.SortOrder
  an?: Prisma.SortOrder
  indicators?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type BalanceSheetSumOrderByAggregateInput = {
  an?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type BalanceSheetSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cui?: boolean
  an?: boolean
  indicators?: boolean
  lastUpdated?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["balanceSheet"]>

export type BalanceSheetSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cui?: boolean
  an?: boolean
  indicators?: boolean
  lastUpdated?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["balanceSheet"]>

export type BalanceSheetSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cui?: boolean
  an?: boolean
  indicators?: boolean
  lastUpdated?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["balanceSheet"]>

export type BalanceSheetSelectScalar = {
  id?: boolean
  cui?: boolean
  an?: boolean
  indicators?: boolean
  lastUpdated?: boolean
  createdAt?: boolean
}

export type BalanceSheetOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "cui" | "an" | "indicators" | "lastUpdated" | "createdAt", ExtArgs["result"]["balanceSheet"]>

export type $BalanceSheetPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BalanceSheet"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    cui: string
    an: number
    indicators: string
    lastUpdated: Date
    createdAt: Date
  }, ExtArgs["result"]["balanceSheet"]>
  composites: {}
}

export type BalanceSheetGetPayload<S extends boolean | null | undefined | BalanceSheetDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload, S>

export type BalanceSheetCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BalanceSheetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BalanceSheetCountAggregateInputType | true
  }

export interface BalanceSheetDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BalanceSheet'], meta: { name: 'BalanceSheet' } }
  /**
   * Find zero or one BalanceSheet that matches the filter.
   * @param {BalanceSheetFindUniqueArgs} args - Arguments to find a BalanceSheet
   * @example
   * // Get one BalanceSheet
   * const balanceSheet = await prisma.balanceSheet.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BalanceSheetFindUniqueArgs>(args: Prisma.SelectSubset<T, BalanceSheetFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BalanceSheetClient<runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BalanceSheet that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BalanceSheetFindUniqueOrThrowArgs} args - Arguments to find a BalanceSheet
   * @example
   * // Get one BalanceSheet
   * const balanceSheet = await prisma.balanceSheet.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BalanceSheetFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BalanceSheetFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BalanceSheetClient<runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BalanceSheet that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceSheetFindFirstArgs} args - Arguments to find a BalanceSheet
   * @example
   * // Get one BalanceSheet
   * const balanceSheet = await prisma.balanceSheet.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BalanceSheetFindFirstArgs>(args?: Prisma.SelectSubset<T, BalanceSheetFindFirstArgs<ExtArgs>>): Prisma.Prisma__BalanceSheetClient<runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BalanceSheet that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceSheetFindFirstOrThrowArgs} args - Arguments to find a BalanceSheet
   * @example
   * // Get one BalanceSheet
   * const balanceSheet = await prisma.balanceSheet.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BalanceSheetFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BalanceSheetFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BalanceSheetClient<runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BalanceSheets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceSheetFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BalanceSheets
   * const balanceSheets = await prisma.balanceSheet.findMany()
   * 
   * // Get first 10 BalanceSheets
   * const balanceSheets = await prisma.balanceSheet.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const balanceSheetWithIdOnly = await prisma.balanceSheet.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BalanceSheetFindManyArgs>(args?: Prisma.SelectSubset<T, BalanceSheetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BalanceSheet.
   * @param {BalanceSheetCreateArgs} args - Arguments to create a BalanceSheet.
   * @example
   * // Create one BalanceSheet
   * const BalanceSheet = await prisma.balanceSheet.create({
   *   data: {
   *     // ... data to create a BalanceSheet
   *   }
   * })
   * 
   */
  create<T extends BalanceSheetCreateArgs>(args: Prisma.SelectSubset<T, BalanceSheetCreateArgs<ExtArgs>>): Prisma.Prisma__BalanceSheetClient<runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BalanceSheets.
   * @param {BalanceSheetCreateManyArgs} args - Arguments to create many BalanceSheets.
   * @example
   * // Create many BalanceSheets
   * const balanceSheet = await prisma.balanceSheet.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BalanceSheetCreateManyArgs>(args?: Prisma.SelectSubset<T, BalanceSheetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BalanceSheets and returns the data saved in the database.
   * @param {BalanceSheetCreateManyAndReturnArgs} args - Arguments to create many BalanceSheets.
   * @example
   * // Create many BalanceSheets
   * const balanceSheet = await prisma.balanceSheet.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BalanceSheets and only return the `id`
   * const balanceSheetWithIdOnly = await prisma.balanceSheet.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BalanceSheetCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BalanceSheetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BalanceSheet.
   * @param {BalanceSheetDeleteArgs} args - Arguments to delete one BalanceSheet.
   * @example
   * // Delete one BalanceSheet
   * const BalanceSheet = await prisma.balanceSheet.delete({
   *   where: {
   *     // ... filter to delete one BalanceSheet
   *   }
   * })
   * 
   */
  delete<T extends BalanceSheetDeleteArgs>(args: Prisma.SelectSubset<T, BalanceSheetDeleteArgs<ExtArgs>>): Prisma.Prisma__BalanceSheetClient<runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BalanceSheet.
   * @param {BalanceSheetUpdateArgs} args - Arguments to update one BalanceSheet.
   * @example
   * // Update one BalanceSheet
   * const balanceSheet = await prisma.balanceSheet.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BalanceSheetUpdateArgs>(args: Prisma.SelectSubset<T, BalanceSheetUpdateArgs<ExtArgs>>): Prisma.Prisma__BalanceSheetClient<runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BalanceSheets.
   * @param {BalanceSheetDeleteManyArgs} args - Arguments to filter BalanceSheets to delete.
   * @example
   * // Delete a few BalanceSheets
   * const { count } = await prisma.balanceSheet.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BalanceSheetDeleteManyArgs>(args?: Prisma.SelectSubset<T, BalanceSheetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BalanceSheets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceSheetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BalanceSheets
   * const balanceSheet = await prisma.balanceSheet.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BalanceSheetUpdateManyArgs>(args: Prisma.SelectSubset<T, BalanceSheetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BalanceSheets and returns the data updated in the database.
   * @param {BalanceSheetUpdateManyAndReturnArgs} args - Arguments to update many BalanceSheets.
   * @example
   * // Update many BalanceSheets
   * const balanceSheet = await prisma.balanceSheet.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BalanceSheets and only return the `id`
   * const balanceSheetWithIdOnly = await prisma.balanceSheet.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BalanceSheetUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BalanceSheetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BalanceSheet.
   * @param {BalanceSheetUpsertArgs} args - Arguments to update or create a BalanceSheet.
   * @example
   * // Update or create a BalanceSheet
   * const balanceSheet = await prisma.balanceSheet.upsert({
   *   create: {
   *     // ... data to create a BalanceSheet
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BalanceSheet we want to update
   *   }
   * })
   */
  upsert<T extends BalanceSheetUpsertArgs>(args: Prisma.SelectSubset<T, BalanceSheetUpsertArgs<ExtArgs>>): Prisma.Prisma__BalanceSheetClient<runtime.Types.Result.GetResult<Prisma.$BalanceSheetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BalanceSheets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceSheetCountArgs} args - Arguments to filter BalanceSheets to count.
   * @example
   * // Count the number of BalanceSheets
   * const count = await prisma.balanceSheet.count({
   *   where: {
   *     // ... the filter for the BalanceSheets we want to count
   *   }
   * })
  **/
  count<T extends BalanceSheetCountArgs>(
    args?: Prisma.Subset<T, BalanceSheetCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BalanceSheetCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BalanceSheet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceSheetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BalanceSheetAggregateArgs>(args: Prisma.Subset<T, BalanceSheetAggregateArgs>): Prisma.PrismaPromise<GetBalanceSheetAggregateType<T>>

  /**
   * Group by BalanceSheet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BalanceSheetGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BalanceSheetGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BalanceSheetGroupByArgs['orderBy'] }
      : { orderBy?: BalanceSheetGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BalanceSheetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBalanceSheetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BalanceSheet model
 */
readonly fields: BalanceSheetFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BalanceSheet.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BalanceSheetClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BalanceSheet model
 */
export interface BalanceSheetFieldRefs {
  readonly id: Prisma.FieldRef<"BalanceSheet", 'String'>
  readonly cui: Prisma.FieldRef<"BalanceSheet", 'String'>
  readonly an: Prisma.FieldRef<"BalanceSheet", 'Int'>
  readonly indicators: Prisma.FieldRef<"BalanceSheet", 'String'>
  readonly lastUpdated: Prisma.FieldRef<"BalanceSheet", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"BalanceSheet", 'DateTime'>
}
    

// Custom InputTypes
/**
 * BalanceSheet findUnique
 */
export type BalanceSheetFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
  /**
   * Filter, which BalanceSheet to fetch.
   */
  where: Prisma.BalanceSheetWhereUniqueInput
}

/**
 * BalanceSheet findUniqueOrThrow
 */
export type BalanceSheetFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
  /**
   * Filter, which BalanceSheet to fetch.
   */
  where: Prisma.BalanceSheetWhereUniqueInput
}

/**
 * BalanceSheet findFirst
 */
export type BalanceSheetFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
  /**
   * Filter, which BalanceSheet to fetch.
   */
  where?: Prisma.BalanceSheetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BalanceSheets to fetch.
   */
  orderBy?: Prisma.BalanceSheetOrderByWithRelationInput | Prisma.BalanceSheetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BalanceSheets.
   */
  cursor?: Prisma.BalanceSheetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BalanceSheets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BalanceSheets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BalanceSheets.
   */
  distinct?: Prisma.BalanceSheetScalarFieldEnum | Prisma.BalanceSheetScalarFieldEnum[]
}

/**
 * BalanceSheet findFirstOrThrow
 */
export type BalanceSheetFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
  /**
   * Filter, which BalanceSheet to fetch.
   */
  where?: Prisma.BalanceSheetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BalanceSheets to fetch.
   */
  orderBy?: Prisma.BalanceSheetOrderByWithRelationInput | Prisma.BalanceSheetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BalanceSheets.
   */
  cursor?: Prisma.BalanceSheetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BalanceSheets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BalanceSheets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BalanceSheets.
   */
  distinct?: Prisma.BalanceSheetScalarFieldEnum | Prisma.BalanceSheetScalarFieldEnum[]
}

/**
 * BalanceSheet findMany
 */
export type BalanceSheetFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
  /**
   * Filter, which BalanceSheets to fetch.
   */
  where?: Prisma.BalanceSheetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BalanceSheets to fetch.
   */
  orderBy?: Prisma.BalanceSheetOrderByWithRelationInput | Prisma.BalanceSheetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BalanceSheets.
   */
  cursor?: Prisma.BalanceSheetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BalanceSheets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BalanceSheets.
   */
  skip?: number
  distinct?: Prisma.BalanceSheetScalarFieldEnum | Prisma.BalanceSheetScalarFieldEnum[]
}

/**
 * BalanceSheet create
 */
export type BalanceSheetCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
  /**
   * The data needed to create a BalanceSheet.
   */
  data: Prisma.XOR<Prisma.BalanceSheetCreateInput, Prisma.BalanceSheetUncheckedCreateInput>
}

/**
 * BalanceSheet createMany
 */
export type BalanceSheetCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BalanceSheets.
   */
  data: Prisma.BalanceSheetCreateManyInput | Prisma.BalanceSheetCreateManyInput[]
}

/**
 * BalanceSheet createManyAndReturn
 */
export type BalanceSheetCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
  /**
   * The data used to create many BalanceSheets.
   */
  data: Prisma.BalanceSheetCreateManyInput | Prisma.BalanceSheetCreateManyInput[]
}

/**
 * BalanceSheet update
 */
export type BalanceSheetUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
  /**
   * The data needed to update a BalanceSheet.
   */
  data: Prisma.XOR<Prisma.BalanceSheetUpdateInput, Prisma.BalanceSheetUncheckedUpdateInput>
  /**
   * Choose, which BalanceSheet to update.
   */
  where: Prisma.BalanceSheetWhereUniqueInput
}

/**
 * BalanceSheet updateMany
 */
export type BalanceSheetUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BalanceSheets.
   */
  data: Prisma.XOR<Prisma.BalanceSheetUpdateManyMutationInput, Prisma.BalanceSheetUncheckedUpdateManyInput>
  /**
   * Filter which BalanceSheets to update
   */
  where?: Prisma.BalanceSheetWhereInput
  /**
   * Limit how many BalanceSheets to update.
   */
  limit?: number
}

/**
 * BalanceSheet updateManyAndReturn
 */
export type BalanceSheetUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
  /**
   * The data used to update BalanceSheets.
   */
  data: Prisma.XOR<Prisma.BalanceSheetUpdateManyMutationInput, Prisma.BalanceSheetUncheckedUpdateManyInput>
  /**
   * Filter which BalanceSheets to update
   */
  where?: Prisma.BalanceSheetWhereInput
  /**
   * Limit how many BalanceSheets to update.
   */
  limit?: number
}

/**
 * BalanceSheet upsert
 */
export type BalanceSheetUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
  /**
   * The filter to search for the BalanceSheet to update in case it exists.
   */
  where: Prisma.BalanceSheetWhereUniqueInput
  /**
   * In case the BalanceSheet found by the `where` argument doesn't exist, create a new BalanceSheet with this data.
   */
  create: Prisma.XOR<Prisma.BalanceSheetCreateInput, Prisma.BalanceSheetUncheckedCreateInput>
  /**
   * In case the BalanceSheet was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BalanceSheetUpdateInput, Prisma.BalanceSheetUncheckedUpdateInput>
}

/**
 * BalanceSheet delete
 */
export type BalanceSheetDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
  /**
   * Filter which BalanceSheet to delete.
   */
  where: Prisma.BalanceSheetWhereUniqueInput
}

/**
 * BalanceSheet deleteMany
 */
export type BalanceSheetDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BalanceSheets to delete
   */
  where?: Prisma.BalanceSheetWhereInput
  /**
   * Limit how many BalanceSheets to delete.
   */
  limit?: number
}

/**
 * BalanceSheet without action
 */
export type BalanceSheetDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BalanceSheet
   */
  select?: Prisma.BalanceSheetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BalanceSheet
   */
  omit?: Prisma.BalanceSheetOmit<ExtArgs> | null
}
