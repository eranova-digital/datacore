
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Request` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Request
 * 
 */
export type RequestModel = runtime.Types.Result.DefaultSelection<Prisma.$RequestPayload>

export type AggregateRequest = {
  _count: RequestCountAggregateOutputType | null
  _avg: RequestAvgAggregateOutputType | null
  _sum: RequestSumAggregateOutputType | null
  _min: RequestMinAggregateOutputType | null
  _max: RequestMaxAggregateOutputType | null
}

export type RequestAvgAggregateOutputType = {
  responseStatus: number | null
  responseTime: number | null
}

export type RequestSumAggregateOutputType = {
  responseStatus: number | null
  responseTime: number | null
}

export type RequestMinAggregateOutputType = {
  id: string | null
  ip: string | null
  ua: string | null
  url: string | null
  method: string | null
  requestBody: string | null
  requestParams: string | null
  requestQuery: string | null
  responseStatus: number | null
  responseBody: string | null
  responseTime: number | null
  createdAt: Date | null
  completedAt: Date | null
}

export type RequestMaxAggregateOutputType = {
  id: string | null
  ip: string | null
  ua: string | null
  url: string | null
  method: string | null
  requestBody: string | null
  requestParams: string | null
  requestQuery: string | null
  responseStatus: number | null
  responseBody: string | null
  responseTime: number | null
  createdAt: Date | null
  completedAt: Date | null
}

export type RequestCountAggregateOutputType = {
  id: number
  ip: number
  ua: number
  url: number
  method: number
  requestBody: number
  requestParams: number
  requestQuery: number
  responseStatus: number
  responseBody: number
  responseTime: number
  createdAt: number
  completedAt: number
  _all: number
}


export type RequestAvgAggregateInputType = {
  responseStatus?: true
  responseTime?: true
}

export type RequestSumAggregateInputType = {
  responseStatus?: true
  responseTime?: true
}

export type RequestMinAggregateInputType = {
  id?: true
  ip?: true
  ua?: true
  url?: true
  method?: true
  requestBody?: true
  requestParams?: true
  requestQuery?: true
  responseStatus?: true
  responseBody?: true
  responseTime?: true
  createdAt?: true
  completedAt?: true
}

export type RequestMaxAggregateInputType = {
  id?: true
  ip?: true
  ua?: true
  url?: true
  method?: true
  requestBody?: true
  requestParams?: true
  requestQuery?: true
  responseStatus?: true
  responseBody?: true
  responseTime?: true
  createdAt?: true
  completedAt?: true
}

export type RequestCountAggregateInputType = {
  id?: true
  ip?: true
  ua?: true
  url?: true
  method?: true
  requestBody?: true
  requestParams?: true
  requestQuery?: true
  responseStatus?: true
  responseBody?: true
  responseTime?: true
  createdAt?: true
  completedAt?: true
  _all?: true
}

export type RequestAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Request to aggregate.
   */
  where?: Prisma.RequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Requests to fetch.
   */
  orderBy?: Prisma.RequestOrderByWithRelationInput | Prisma.RequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Requests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Requests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Requests
  **/
  _count?: true | RequestCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RequestAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RequestSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RequestMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RequestMaxAggregateInputType
}

export type GetRequestAggregateType<T extends RequestAggregateArgs> = {
      [P in keyof T & keyof AggregateRequest]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRequest[P]>
    : Prisma.GetScalarType<T[P], AggregateRequest[P]>
}




export type RequestGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RequestWhereInput
  orderBy?: Prisma.RequestOrderByWithAggregationInput | Prisma.RequestOrderByWithAggregationInput[]
  by: Prisma.RequestScalarFieldEnum[] | Prisma.RequestScalarFieldEnum
  having?: Prisma.RequestScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RequestCountAggregateInputType | true
  _avg?: RequestAvgAggregateInputType
  _sum?: RequestSumAggregateInputType
  _min?: RequestMinAggregateInputType
  _max?: RequestMaxAggregateInputType
}

export type RequestGroupByOutputType = {
  id: string
  ip: string
  ua: string
  url: string
  method: string
  requestBody: string | null
  requestParams: string | null
  requestQuery: string | null
  responseStatus: number | null
  responseBody: string | null
  responseTime: number | null
  createdAt: Date
  completedAt: Date | null
  _count: RequestCountAggregateOutputType | null
  _avg: RequestAvgAggregateOutputType | null
  _sum: RequestSumAggregateOutputType | null
  _min: RequestMinAggregateOutputType | null
  _max: RequestMaxAggregateOutputType | null
}

type GetRequestGroupByPayload<T extends RequestGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RequestGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RequestGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RequestGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RequestGroupByOutputType[P]>
      }
    >
  >



export type RequestWhereInput = {
  AND?: Prisma.RequestWhereInput | Prisma.RequestWhereInput[]
  OR?: Prisma.RequestWhereInput[]
  NOT?: Prisma.RequestWhereInput | Prisma.RequestWhereInput[]
  id?: Prisma.StringFilter<"Request"> | string
  ip?: Prisma.StringFilter<"Request"> | string
  ua?: Prisma.StringFilter<"Request"> | string
  url?: Prisma.StringFilter<"Request"> | string
  method?: Prisma.StringFilter<"Request"> | string
  requestBody?: Prisma.StringNullableFilter<"Request"> | string | null
  requestParams?: Prisma.StringNullableFilter<"Request"> | string | null
  requestQuery?: Prisma.StringNullableFilter<"Request"> | string | null
  responseStatus?: Prisma.IntNullableFilter<"Request"> | number | null
  responseBody?: Prisma.StringNullableFilter<"Request"> | string | null
  responseTime?: Prisma.IntNullableFilter<"Request"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Request"> | Date | string
  completedAt?: Prisma.DateTimeNullableFilter<"Request"> | Date | string | null
}

export type RequestOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  ip?: Prisma.SortOrder
  ua?: Prisma.SortOrder
  url?: Prisma.SortOrder
  method?: Prisma.SortOrder
  requestBody?: Prisma.SortOrderInput | Prisma.SortOrder
  requestParams?: Prisma.SortOrderInput | Prisma.SortOrder
  requestQuery?: Prisma.SortOrderInput | Prisma.SortOrder
  responseStatus?: Prisma.SortOrderInput | Prisma.SortOrder
  responseBody?: Prisma.SortOrderInput | Prisma.SortOrder
  responseTime?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type RequestWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RequestWhereInput | Prisma.RequestWhereInput[]
  OR?: Prisma.RequestWhereInput[]
  NOT?: Prisma.RequestWhereInput | Prisma.RequestWhereInput[]
  ip?: Prisma.StringFilter<"Request"> | string
  ua?: Prisma.StringFilter<"Request"> | string
  url?: Prisma.StringFilter<"Request"> | string
  method?: Prisma.StringFilter<"Request"> | string
  requestBody?: Prisma.StringNullableFilter<"Request"> | string | null
  requestParams?: Prisma.StringNullableFilter<"Request"> | string | null
  requestQuery?: Prisma.StringNullableFilter<"Request"> | string | null
  responseStatus?: Prisma.IntNullableFilter<"Request"> | number | null
  responseBody?: Prisma.StringNullableFilter<"Request"> | string | null
  responseTime?: Prisma.IntNullableFilter<"Request"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Request"> | Date | string
  completedAt?: Prisma.DateTimeNullableFilter<"Request"> | Date | string | null
}, "id">

export type RequestOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  ip?: Prisma.SortOrder
  ua?: Prisma.SortOrder
  url?: Prisma.SortOrder
  method?: Prisma.SortOrder
  requestBody?: Prisma.SortOrderInput | Prisma.SortOrder
  requestParams?: Prisma.SortOrderInput | Prisma.SortOrder
  requestQuery?: Prisma.SortOrderInput | Prisma.SortOrder
  responseStatus?: Prisma.SortOrderInput | Prisma.SortOrder
  responseBody?: Prisma.SortOrderInput | Prisma.SortOrder
  responseTime?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.RequestCountOrderByAggregateInput
  _avg?: Prisma.RequestAvgOrderByAggregateInput
  _max?: Prisma.RequestMaxOrderByAggregateInput
  _min?: Prisma.RequestMinOrderByAggregateInput
  _sum?: Prisma.RequestSumOrderByAggregateInput
}

export type RequestScalarWhereWithAggregatesInput = {
  AND?: Prisma.RequestScalarWhereWithAggregatesInput | Prisma.RequestScalarWhereWithAggregatesInput[]
  OR?: Prisma.RequestScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RequestScalarWhereWithAggregatesInput | Prisma.RequestScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Request"> | string
  ip?: Prisma.StringWithAggregatesFilter<"Request"> | string
  ua?: Prisma.StringWithAggregatesFilter<"Request"> | string
  url?: Prisma.StringWithAggregatesFilter<"Request"> | string
  method?: Prisma.StringWithAggregatesFilter<"Request"> | string
  requestBody?: Prisma.StringNullableWithAggregatesFilter<"Request"> | string | null
  requestParams?: Prisma.StringNullableWithAggregatesFilter<"Request"> | string | null
  requestQuery?: Prisma.StringNullableWithAggregatesFilter<"Request"> | string | null
  responseStatus?: Prisma.IntNullableWithAggregatesFilter<"Request"> | number | null
  responseBody?: Prisma.StringNullableWithAggregatesFilter<"Request"> | string | null
  responseTime?: Prisma.IntNullableWithAggregatesFilter<"Request"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Request"> | Date | string
  completedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Request"> | Date | string | null
}

export type RequestCreateInput = {
  id?: string
  ip: string
  ua: string
  url: string
  method: string
  requestBody?: string | null
  requestParams?: string | null
  requestQuery?: string | null
  responseStatus?: number | null
  responseBody?: string | null
  responseTime?: number | null
  createdAt?: Date | string
  completedAt?: Date | string | null
}

export type RequestUncheckedCreateInput = {
  id?: string
  ip: string
  ua: string
  url: string
  method: string
  requestBody?: string | null
  requestParams?: string | null
  requestQuery?: string | null
  responseStatus?: number | null
  responseBody?: string | null
  responseTime?: number | null
  createdAt?: Date | string
  completedAt?: Date | string | null
}

export type RequestUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ip?: Prisma.StringFieldUpdateOperationsInput | string
  ua?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  requestBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requestParams?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requestQuery?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  responseStatus?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  responseBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  responseTime?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type RequestUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ip?: Prisma.StringFieldUpdateOperationsInput | string
  ua?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  requestBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requestParams?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requestQuery?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  responseStatus?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  responseBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  responseTime?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type RequestCreateManyInput = {
  id?: string
  ip: string
  ua: string
  url: string
  method: string
  requestBody?: string | null
  requestParams?: string | null
  requestQuery?: string | null
  responseStatus?: number | null
  responseBody?: string | null
  responseTime?: number | null
  createdAt?: Date | string
  completedAt?: Date | string | null
}

export type RequestUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ip?: Prisma.StringFieldUpdateOperationsInput | string
  ua?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  requestBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requestParams?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requestQuery?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  responseStatus?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  responseBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  responseTime?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type RequestUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ip?: Prisma.StringFieldUpdateOperationsInput | string
  ua?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  requestBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requestParams?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  requestQuery?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  responseStatus?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  responseBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  responseTime?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type RequestCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ip?: Prisma.SortOrder
  ua?: Prisma.SortOrder
  url?: Prisma.SortOrder
  method?: Prisma.SortOrder
  requestBody?: Prisma.SortOrder
  requestParams?: Prisma.SortOrder
  requestQuery?: Prisma.SortOrder
  responseStatus?: Prisma.SortOrder
  responseBody?: Prisma.SortOrder
  responseTime?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type RequestAvgOrderByAggregateInput = {
  responseStatus?: Prisma.SortOrder
  responseTime?: Prisma.SortOrder
}

export type RequestMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ip?: Prisma.SortOrder
  ua?: Prisma.SortOrder
  url?: Prisma.SortOrder
  method?: Prisma.SortOrder
  requestBody?: Prisma.SortOrder
  requestParams?: Prisma.SortOrder
  requestQuery?: Prisma.SortOrder
  responseStatus?: Prisma.SortOrder
  responseBody?: Prisma.SortOrder
  responseTime?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type RequestMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ip?: Prisma.SortOrder
  ua?: Prisma.SortOrder
  url?: Prisma.SortOrder
  method?: Prisma.SortOrder
  requestBody?: Prisma.SortOrder
  requestParams?: Prisma.SortOrder
  requestQuery?: Prisma.SortOrder
  responseStatus?: Prisma.SortOrder
  responseBody?: Prisma.SortOrder
  responseTime?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type RequestSumOrderByAggregateInput = {
  responseStatus?: Prisma.SortOrder
  responseTime?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}



export type RequestSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ip?: boolean
  ua?: boolean
  url?: boolean
  method?: boolean
  requestBody?: boolean
  requestParams?: boolean
  requestQuery?: boolean
  responseStatus?: boolean
  responseBody?: boolean
  responseTime?: boolean
  createdAt?: boolean
  completedAt?: boolean
}, ExtArgs["result"]["request"]>

export type RequestSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ip?: boolean
  ua?: boolean
  url?: boolean
  method?: boolean
  requestBody?: boolean
  requestParams?: boolean
  requestQuery?: boolean
  responseStatus?: boolean
  responseBody?: boolean
  responseTime?: boolean
  createdAt?: boolean
  completedAt?: boolean
}, ExtArgs["result"]["request"]>

export type RequestSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ip?: boolean
  ua?: boolean
  url?: boolean
  method?: boolean
  requestBody?: boolean
  requestParams?: boolean
  requestQuery?: boolean
  responseStatus?: boolean
  responseBody?: boolean
  responseTime?: boolean
  createdAt?: boolean
  completedAt?: boolean
}, ExtArgs["result"]["request"]>

export type RequestSelectScalar = {
  id?: boolean
  ip?: boolean
  ua?: boolean
  url?: boolean
  method?: boolean
  requestBody?: boolean
  requestParams?: boolean
  requestQuery?: boolean
  responseStatus?: boolean
  responseBody?: boolean
  responseTime?: boolean
  createdAt?: boolean
  completedAt?: boolean
}

export type RequestOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "ip" | "ua" | "url" | "method" | "requestBody" | "requestParams" | "requestQuery" | "responseStatus" | "responseBody" | "responseTime" | "createdAt" | "completedAt", ExtArgs["result"]["request"]>

export type $RequestPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Request"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    ip: string
    ua: string
    url: string
    method: string
    requestBody: string | null
    requestParams: string | null
    requestQuery: string | null
    responseStatus: number | null
    responseBody: string | null
    responseTime: number | null
    createdAt: Date
    completedAt: Date | null
  }, ExtArgs["result"]["request"]>
  composites: {}
}

export type RequestGetPayload<S extends boolean | null | undefined | RequestDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RequestPayload, S>

export type RequestCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RequestCountAggregateInputType | true
  }

export interface RequestDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Request'], meta: { name: 'Request' } }
  /**
   * Find zero or one Request that matches the filter.
   * @param {RequestFindUniqueArgs} args - Arguments to find a Request
   * @example
   * // Get one Request
   * const request = await prisma.request.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RequestFindUniqueArgs>(args: Prisma.SelectSubset<T, RequestFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RequestClient<runtime.Types.Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Request that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RequestFindUniqueOrThrowArgs} args - Arguments to find a Request
   * @example
   * // Get one Request
   * const request = await prisma.request.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RequestFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RequestClient<runtime.Types.Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Request that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequestFindFirstArgs} args - Arguments to find a Request
   * @example
   * // Get one Request
   * const request = await prisma.request.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RequestFindFirstArgs>(args?: Prisma.SelectSubset<T, RequestFindFirstArgs<ExtArgs>>): Prisma.Prisma__RequestClient<runtime.Types.Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Request that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequestFindFirstOrThrowArgs} args - Arguments to find a Request
   * @example
   * // Get one Request
   * const request = await prisma.request.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RequestFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RequestFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RequestClient<runtime.Types.Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Requests that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequestFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Requests
   * const requests = await prisma.request.findMany()
   * 
   * // Get first 10 Requests
   * const requests = await prisma.request.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const requestWithIdOnly = await prisma.request.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RequestFindManyArgs>(args?: Prisma.SelectSubset<T, RequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Request.
   * @param {RequestCreateArgs} args - Arguments to create a Request.
   * @example
   * // Create one Request
   * const Request = await prisma.request.create({
   *   data: {
   *     // ... data to create a Request
   *   }
   * })
   * 
   */
  create<T extends RequestCreateArgs>(args: Prisma.SelectSubset<T, RequestCreateArgs<ExtArgs>>): Prisma.Prisma__RequestClient<runtime.Types.Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Requests.
   * @param {RequestCreateManyArgs} args - Arguments to create many Requests.
   * @example
   * // Create many Requests
   * const request = await prisma.request.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RequestCreateManyArgs>(args?: Prisma.SelectSubset<T, RequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Requests and returns the data saved in the database.
   * @param {RequestCreateManyAndReturnArgs} args - Arguments to create many Requests.
   * @example
   * // Create many Requests
   * const request = await prisma.request.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Requests and only return the `id`
   * const requestWithIdOnly = await prisma.request.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RequestCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Request.
   * @param {RequestDeleteArgs} args - Arguments to delete one Request.
   * @example
   * // Delete one Request
   * const Request = await prisma.request.delete({
   *   where: {
   *     // ... filter to delete one Request
   *   }
   * })
   * 
   */
  delete<T extends RequestDeleteArgs>(args: Prisma.SelectSubset<T, RequestDeleteArgs<ExtArgs>>): Prisma.Prisma__RequestClient<runtime.Types.Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Request.
   * @param {RequestUpdateArgs} args - Arguments to update one Request.
   * @example
   * // Update one Request
   * const request = await prisma.request.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RequestUpdateArgs>(args: Prisma.SelectSubset<T, RequestUpdateArgs<ExtArgs>>): Prisma.Prisma__RequestClient<runtime.Types.Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Requests.
   * @param {RequestDeleteManyArgs} args - Arguments to filter Requests to delete.
   * @example
   * // Delete a few Requests
   * const { count } = await prisma.request.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RequestDeleteManyArgs>(args?: Prisma.SelectSubset<T, RequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Requests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequestUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Requests
   * const request = await prisma.request.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RequestUpdateManyArgs>(args: Prisma.SelectSubset<T, RequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Requests and returns the data updated in the database.
   * @param {RequestUpdateManyAndReturnArgs} args - Arguments to update many Requests.
   * @example
   * // Update many Requests
   * const request = await prisma.request.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Requests and only return the `id`
   * const requestWithIdOnly = await prisma.request.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RequestUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Request.
   * @param {RequestUpsertArgs} args - Arguments to update or create a Request.
   * @example
   * // Update or create a Request
   * const request = await prisma.request.upsert({
   *   create: {
   *     // ... data to create a Request
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Request we want to update
   *   }
   * })
   */
  upsert<T extends RequestUpsertArgs>(args: Prisma.SelectSubset<T, RequestUpsertArgs<ExtArgs>>): Prisma.Prisma__RequestClient<runtime.Types.Result.GetResult<Prisma.$RequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Requests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequestCountArgs} args - Arguments to filter Requests to count.
   * @example
   * // Count the number of Requests
   * const count = await prisma.request.count({
   *   where: {
   *     // ... the filter for the Requests we want to count
   *   }
   * })
  **/
  count<T extends RequestCountArgs>(
    args?: Prisma.Subset<T, RequestCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RequestCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Request.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RequestAggregateArgs>(args: Prisma.Subset<T, RequestAggregateArgs>): Prisma.PrismaPromise<GetRequestAggregateType<T>>

  /**
   * Group by Request.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RequestGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RequestGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RequestGroupByArgs['orderBy'] }
      : { orderBy?: RequestGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Request model
 */
readonly fields: RequestFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Request.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RequestClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Request model
 */
export interface RequestFieldRefs {
  readonly id: Prisma.FieldRef<"Request", 'String'>
  readonly ip: Prisma.FieldRef<"Request", 'String'>
  readonly ua: Prisma.FieldRef<"Request", 'String'>
  readonly url: Prisma.FieldRef<"Request", 'String'>
  readonly method: Prisma.FieldRef<"Request", 'String'>
  readonly requestBody: Prisma.FieldRef<"Request", 'String'>
  readonly requestParams: Prisma.FieldRef<"Request", 'String'>
  readonly requestQuery: Prisma.FieldRef<"Request", 'String'>
  readonly responseStatus: Prisma.FieldRef<"Request", 'Int'>
  readonly responseBody: Prisma.FieldRef<"Request", 'String'>
  readonly responseTime: Prisma.FieldRef<"Request", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Request", 'DateTime'>
  readonly completedAt: Prisma.FieldRef<"Request", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Request findUnique
 */
export type RequestFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
  /**
   * Filter, which Request to fetch.
   */
  where: Prisma.RequestWhereUniqueInput
}

/**
 * Request findUniqueOrThrow
 */
export type RequestFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
  /**
   * Filter, which Request to fetch.
   */
  where: Prisma.RequestWhereUniqueInput
}

/**
 * Request findFirst
 */
export type RequestFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
  /**
   * Filter, which Request to fetch.
   */
  where?: Prisma.RequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Requests to fetch.
   */
  orderBy?: Prisma.RequestOrderByWithRelationInput | Prisma.RequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Requests.
   */
  cursor?: Prisma.RequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Requests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Requests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Requests.
   */
  distinct?: Prisma.RequestScalarFieldEnum | Prisma.RequestScalarFieldEnum[]
}

/**
 * Request findFirstOrThrow
 */
export type RequestFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
  /**
   * Filter, which Request to fetch.
   */
  where?: Prisma.RequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Requests to fetch.
   */
  orderBy?: Prisma.RequestOrderByWithRelationInput | Prisma.RequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Requests.
   */
  cursor?: Prisma.RequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Requests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Requests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Requests.
   */
  distinct?: Prisma.RequestScalarFieldEnum | Prisma.RequestScalarFieldEnum[]
}

/**
 * Request findMany
 */
export type RequestFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
  /**
   * Filter, which Requests to fetch.
   */
  where?: Prisma.RequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Requests to fetch.
   */
  orderBy?: Prisma.RequestOrderByWithRelationInput | Prisma.RequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Requests.
   */
  cursor?: Prisma.RequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Requests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Requests.
   */
  skip?: number
  distinct?: Prisma.RequestScalarFieldEnum | Prisma.RequestScalarFieldEnum[]
}

/**
 * Request create
 */
export type RequestCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
  /**
   * The data needed to create a Request.
   */
  data: Prisma.XOR<Prisma.RequestCreateInput, Prisma.RequestUncheckedCreateInput>
}

/**
 * Request createMany
 */
export type RequestCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Requests.
   */
  data: Prisma.RequestCreateManyInput | Prisma.RequestCreateManyInput[]
}

/**
 * Request createManyAndReturn
 */
export type RequestCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
  /**
   * The data used to create many Requests.
   */
  data: Prisma.RequestCreateManyInput | Prisma.RequestCreateManyInput[]
}

/**
 * Request update
 */
export type RequestUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
  /**
   * The data needed to update a Request.
   */
  data: Prisma.XOR<Prisma.RequestUpdateInput, Prisma.RequestUncheckedUpdateInput>
  /**
   * Choose, which Request to update.
   */
  where: Prisma.RequestWhereUniqueInput
}

/**
 * Request updateMany
 */
export type RequestUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Requests.
   */
  data: Prisma.XOR<Prisma.RequestUpdateManyMutationInput, Prisma.RequestUncheckedUpdateManyInput>
  /**
   * Filter which Requests to update
   */
  where?: Prisma.RequestWhereInput
  /**
   * Limit how many Requests to update.
   */
  limit?: number
}

/**
 * Request updateManyAndReturn
 */
export type RequestUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
  /**
   * The data used to update Requests.
   */
  data: Prisma.XOR<Prisma.RequestUpdateManyMutationInput, Prisma.RequestUncheckedUpdateManyInput>
  /**
   * Filter which Requests to update
   */
  where?: Prisma.RequestWhereInput
  /**
   * Limit how many Requests to update.
   */
  limit?: number
}

/**
 * Request upsert
 */
export type RequestUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
  /**
   * The filter to search for the Request to update in case it exists.
   */
  where: Prisma.RequestWhereUniqueInput
  /**
   * In case the Request found by the `where` argument doesn't exist, create a new Request with this data.
   */
  create: Prisma.XOR<Prisma.RequestCreateInput, Prisma.RequestUncheckedCreateInput>
  /**
   * In case the Request was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RequestUpdateInput, Prisma.RequestUncheckedUpdateInput>
}

/**
 * Request delete
 */
export type RequestDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
  /**
   * Filter which Request to delete.
   */
  where: Prisma.RequestWhereUniqueInput
}

/**
 * Request deleteMany
 */
export type RequestDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Requests to delete
   */
  where?: Prisma.RequestWhereInput
  /**
   * Limit how many Requests to delete.
   */
  limit?: number
}

/**
 * Request without action
 */
export type RequestDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Request
   */
  select?: Prisma.RequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Request
   */
  omit?: Prisma.RequestOmit<ExtArgs> | null
}
